{% extends 'base.html.twig' %}
{% block title %}Devenir Membre - BINAJIA{% endblock %}
{% block content %}
<div class="min-h-screen pt-20 pb-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-cream via-white to-cream">
  <div class="max-w-3xl mx-auto">
    <!-- Header -->
    <div class="text-center mb-10">
      <div class="inline-flex items-center justify-center w-20 h-20 bg-primary/10 rounded-full mb-6">
        <svg class="w-10 h-10 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
        </svg>
      </div>
      <h1 class="font-serif text-4xl md:text-5xl font-bold text-charcoal mb-3">Rejoignez Binajia</h1>
      <p class="text-lg text-gray-600">Devenez membre de notre communauté en quelques minutes</p>
    </div>

    <!-- Price Card -->
    <div class="bg-gradient-to-br from-primary to-secondary rounded-2xl p-6 mb-8 text-white shadow-xl">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-white/90 text-sm font-medium mb-1">Adhésion annuelle</p>
          <div class="flex items-baseline gap-2">
            <span class="text-5xl font-bold">5 000</span>
            <span class="text-xl font-semibold">FCFA</span>
          </div>
        </div>
        <div class="text-right">
          <div class="bg-white/20 backdrop-blur-sm rounded-lg px-4 py-2">
            <p class="text-xs text-white/90 mb-1">Vous recevrez</p>
            <p class="font-semibold">Carte membre digitale</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Form Card -->
    <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
      <!-- Progress Bar -->
      <div class="bg-gradient-to-r from-primary/5 to-secondary/5 px-6 py-4">
        <div class="flex items-center justify-between mb-2">
          <span class="text-sm font-semibold text-charcoal">Informations personnelles</span>
          <span class="text-xs text-gray-500">Étape 1/1</span>
        </div>
        <div class="w-full bg-gray-200 rounded-full h-1.5">
          <div class="bg-gradient-to-r from-primary to-secondary h-1.5 rounded-full transition-all duration-500" style="width: 100%"></div>
        </div>
      </div>

      <!-- Form Content -->
      <div class="p-6 md:p-8">
        <form id="memberForm" class="space-y-6">
          <!-- Nom & Prénom -->
          <div class="grid md:grid-cols-2 gap-4">
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2 flex items-center gap-1">
                Nom <span class="text-red-500">*</span>
              </label>
              <input 
                type="text" 
                id="lastName" 
                required 
                placeholder="Doe" 
                class="w-full px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
              />
            </div>
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2 flex items-center gap-1">
                Prénom <span class="text-red-500">*</span>
              </label>
              <input 
                type="text" 
                id="firstName" 
                required 
                placeholder="John" 
                class="w-full px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
              />
            </div>
          </div>

          <!-- Email & Téléphone -->
          <div class="grid md:grid-cols-2 gap-4">
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2 flex items-center gap-1">
                Email <span class="text-red-500">*</span>
              </label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"/>
                  </svg>
                </div>
                <input 
                  type="email" 
                  id="email" 
                  required 
                  placeholder="john@exemple.com" 
                  class="w-full pl-10 pr-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
                />
              </div>
            </div>
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2 flex items-center gap-1">
                Téléphone <span class="text-red-500">*</span>
              </label>
              <div class="flex gap-2">
                <span id="dialPreview" class="flex items-center justify-center px-3 rounded-lg bg-gray-50 border-2 border-gray-200 text-charcoal font-medium text-sm">
                  +229
                </span>
                <input 
                  type="tel" 
                  id="phone" 
                  required 
                  placeholder="91 23 45 67" 
                  class="flex-1 px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
                />
              </div>
            </div>
          </div>

          <!-- Pays & Date de naissance -->
          <div class="grid md:grid-cols-2 gap-4">
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2 flex items-center gap-1">
                Pays <span class="text-red-500">*</span>
              </label>
              <div class="relative">
                <select 
                  id="country" 
                  required 
                  class="w-full px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all appearance-none bg-white cursor-pointer"
                >
                  <option value="">Sélectionnez votre pays</option>
                  {% for c in countries %}
                    <option value="{{ c.code }}">{{ c.name }}</option>
                  {% endfor %}
                </select>
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                  </svg>
                </div>
              </div>
            </div>
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2">
                Date de naissance
              </label>
              <input 
                type="date" 
                id="birthDate" 
                class="w-full px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
              />
            </div>
          </div>

          <!-- Photo de profil -->
          <div class="form-group">
            <label class="block text-sm font-semibold text-charcoal mb-3 flex items-center gap-1">
              Photo de profil <span class="text-red-500">*</span>
            </label>
            <div class="flex items-center gap-4">
              <div id="photoPreview" class="w-24 h-24 rounded-full bg-gradient-to-br from-primary/10 to-secondary/10 flex items-center justify-center overflow-hidden border-2 border-gray-200 flex-shrink-0">
                <svg class="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
              </div>
              <div class="flex-1">
                <input 
                  type="file" 
                  id="photoInput" 
                  accept="image/*" 
                  class="hidden" 
                  onchange="handlePhotoUpload(event)"
                />
                <button 
                  type="button" 
                  onclick="document.getElementById('photoInput').click()" 
                  class="px-6 py-2.5 bg-white border-2 border-gray-300 rounded-lg hover:border-primary hover:bg-primary/5 transition-all font-medium text-charcoal"
                >
                  <span class="flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                    Choisir une photo
                  </span>
                </button>
                <p class="text-xs text-gray-500 mt-2">JPG ou PNG, max 5MB</p>
              </div>
            </div>
          </div>

          <!-- Terms -->
          <div class="bg-gray-50 rounded-lg p-4">
            <div class="flex items-start gap-3">
              <input 
                type="checkbox" 
                id="terms" 
                required 
                class="w-5 h-5 mt-0.5 text-primary border-gray-300 rounded focus:ring-2 focus:ring-primary/20 cursor-pointer"
              />
              <label for="terms" class="text-sm text-gray-700 cursor-pointer">
                J'accepte les <a href="#" class="text-primary font-semibold hover:underline">conditions d'utilisation</a> et la <a href="#" class="text-primary font-semibold hover:underline">politique de confidentialité</a> de Binajia
              </label>
            </div>
          </div>

          <!-- Submit Button -->
          <button 
            type="button" 
            id="pay-btn" 
            class="w-full bg-gradient-to-r rounded-full from-primary to-secondary text-white font-bold py-4  hover:shadow-lg hover:scale-[1.02] transition-all duration-200 flex items-center justify-center gap-2"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
            </svg>
            Payer et Finaliser l'adhésion
          </button>
        </form>
      </div>
    </div>

    <!-- Security Notice -->
    <div class="mt-6 flex items-center justify-center gap-2 text-sm text-gray-500">
      <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"/>
      </svg>
      Paiement sécurisé via FedaPay
    </div>
  </div>
</div>

<!-- Loading Overlay -->
<div id="paymentOverlay" class="fixed inset-0 z-[100] hidden">
  <div class="absolute inset-0 bg-black/60 backdrop-blur-sm"></div>
  <div class="absolute inset-0 flex items-center justify-center p-4">
    <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-sm w-full">
      <div class="flex flex-col items-center text-center">
        <div class="w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center mb-4">
          <svg class="animate-spin h-8 w-8 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
          </svg>
        </div>
        <h3 id="paymentOverlayTitle" class="text-xl font-bold text-charcoal mb-2">Traitement en cours…</h3>
        <p id="paymentOverlaySub" class="text-gray-600 mb-4">Merci de patienter.</p>
        <p class="text-xs text-gray-500">Ne fermez pas cette fenêtre</p>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
{{ parent() }}
<script>
let selectedPlan='standard', formData={}, photoData=null;
// Mapping indicatifs (extrait; peut être étendu ou remplacé par intl-tel-input)
const countryDial = {
  'BJ': '+229','NG': '+234','FR': '+33','US': '+1','GB': '+44','CI': '+225','TG': '+228','SN': '+221','CM': '+237','GH': '+233','ZA': '+27','DE': '+49','ES': '+34','IT': '+39','CA': '+1'
};
// Montants par plan (XOF) - prix fixe à 5000 FCFA
const planAmountXOF = { basic: 5000, standard: 5000, premium: 5000 };
function amountForSelectedPlan(){ return planAmountXOF[selectedPlan] || 5000; }
function updateDialFromCountry(){
  const sel = document.getElementById('country');
  const code = (sel && sel.value || '').toUpperCase();
  const dial = countryDial[code] || '+000';
  const dialEl = document.getElementById('dialPreview');
  if(dialEl) dialEl.textContent = dial;
  // si le champ téléphone commence par un autre indicatif connu, ne pas écraser; sinon, préfixer
  const phoneEl = document.getElementById('phone');
  if(phoneEl && phoneEl.value.trim()!=='' && !/^\+\d{1,3}/.test(phoneEl.value.trim())){
    phoneEl.value = phoneEl.value.replace(/^0+/, '');
  }
}
function handlePhotoUpload(ev){const f=ev.target.files[0];if(!f)return;const r=new FileReader();r.onload=e=>{photoData=e.target.result;document.getElementById('photoPreview').innerHTML='<img src="'+photoData+'" class="w-full h-full object-cover">';};r.readAsDataURL(f);}
function getDial(){const el=document.getElementById('dialPreview');return el?el.textContent.trim():''}
function normalizeLocalPhone(num){return (num||'').replace(/\s+/g,'').replace(/[^0-9]/g,'').replace(/^0+/,'')}
async function validateAndContinue() {
  const email = val('email');
  if (!/^\S+@\S+\.\S+$/.test(email)) {
    alert('Veuillez entrer une adresse email valide.');
    return;
  }

  // 🔍 Vérifie si l'email est déjà utilisé
  const check = await checkEmailExists(email);
  if (!check.ok) {
    alert(check.message || 'Cet email est déjà utilisé.');
    return;
  }

  const fullPhone = `${getDial()}${normalizeLocalPhone(val('phone'))}`;
  formData = {
    firstName: val('firstName'),
    lastName: val('lastName'),
    email: email,
    phone: fullPhone,
    country: val('country'),
    birthDate: val('birthDate'),
    terms: document.getElementById('terms').checked
  };

  if (!formData.firstName || !formData.lastName || !normalizeLocalPhone(val('phone')) || !formData.country || !formData.terms) {
    alert('Veuillez remplir tous les champs obligatoires et accepter les conditions.');
    return;
  }

  if (!photoData) {
    alert('La photo de profil est obligatoire pour générer la carte.');
    return;
  }

  // All validation passed, proceed to payment
  prepareFedaPay();
}

async function checkEmailExists(email) {
  try {
    const res = await fetch('{{ path('app_check_email') }}', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({ email })
    });
    const data = await res.json();
    return data;
  } catch (e) {
    console.error('Erreur lors de la vérification email:', e);
    return { ok: false, message: 'Erreur serveur' };
  }
}

function val(id){return document.getElementById(id).value}
function showLoader(title, sub){const o=document.getElementById('paymentOverlay');if(!o)return;document.getElementById('paymentOverlayTitle').textContent=title||'Traitement en cours…';document.getElementById('paymentOverlaySub').textContent=sub||'Merci de patienter.'}
function hideLoader(){const o=document.getElementById('paymentOverlay');if(!o)return;o.classList.add('hidden')}
async function confirmMembership(){
  try {
    showLoader('Finalisation de votre adhésion…','Nous générons votre carte.');
    const payload = new URLSearchParams();
    payload.append('firstName', formData.firstName||'');
    payload.append('lastName', formData.lastName||'');
    payload.append('email', formData.email||'');
    // recompute to be safe at submission time
    const fullPhone = `${getDial()}${normalizeLocalPhone(document.getElementById('phone').value)}`;
    payload.append('phone', fullPhone||'');
    payload.append('country', formData.country||'');
    payload.append('birthDate', formData.birthDate||'');
    payload.append('plan', selectedPlan||'standard');
    if (photoData) payload.append('photoData', photoData);
    // Include payment details from FedaPay callback
    if (typeof lastTransactionId !== 'undefined' && lastTransactionId) {
      payload.append('transactionId', String(lastTransactionId));
    }
    if (typeof lastTransactionStatus !== 'undefined' && lastTransactionStatus) {
      payload.append('transactionStatus', String(lastTransactionStatus));
    }
    payload.append('amount', String(amountForSelectedPlan()));

    const res = await fetch('{{ path('app_membership_submit') }}', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: payload.toString()
    });
    const data = await res.json();
    if (!res.ok || !data.ok) { throw new Error(data.message||'Erreur lors de l\'inscription'); }
    // redirect to generated card page
    window.location.href = data.cardUrl + '?plan=' + encodeURIComponent(selectedPlan||'standard') + (data.avatar?('&avatar='+encodeURIComponent(data.avatar)):'');
  } catch(e) {
    alert('Impossible de finaliser l\'adhésion: '+ e.message);
  } finally { hideLoader(); }
}

</script>

  <script>
const FEDAPAY_PK = '{{ fedapay_public_key|e('js') }}';
let lastTransactionId = null; let lastTransactionStatus = null; let callbackFired = false; let fedapayReady = false;

function prepareFedaPay(){
  // validations basiques déjà faites dans validateAndContinue()
  const amount = amountForSelectedPlan(); // 5000 FCFA
  const desc = 'Adhésion Binajia - ' + (selectedPlan || 'standard');
  const email = formData.email;
  const firstname = formData.firstName;
  const lastname = formData.lastName;

  // extraire code pays ISO2 pour FedaPay (vous avez déjà "country" en ISO2 dans le select)
  const countryCode = (formData.country || '').toUpperCase(); // ex: BJ / NG
  // téléphone déjà normalisé en E.164 côté front
  const phone = formData.phone; // ex: +22991234567

  // Nettoyez toute init précédente faite via un script statique
  // Puis initialisez dynamiquement:
  function onResult(response){
    callbackFired = true;
    if (response && response.transaction) {
      lastTransactionId = response.transaction.id || lastTransactionId;
      lastTransactionStatus = response.transaction.status || lastTransactionStatus;
    }
    // Tentative de vérification serveur avant inscription
    if (lastTransactionId) {
      fetch('{{ path('payment_verify') }}?tx=' + encodeURIComponent(lastTransactionId))
        .then(r=>r.json()).then(v=>{
          if (v && v.ok && (['approved','succeeded','success','paid'].includes(String(v.status||'').toLowerCase()))) {
            confirmMembership();
          } else {
            // fallback: continuer si le front a déjà status positif
            if (lastTransactionStatus && ['approved','succeeded','success','paid'].includes(String(lastTransactionStatus).toLowerCase())) {
              confirmMembership();
            } else {
              alert('Paiement non confirmé. Veuillez réessayer.');
            }
          }
        }).catch(()=>{
          // En cas d'erreur de vérification, utiliser le statut front si positif
          if (lastTransactionStatus && ['approved','succeeded','success','paid'].includes(String(lastTransactionStatus).toLowerCase())) {
            confirmMembership();
          } else {
            alert('Vérification du paiement indisponible. Réessayez plus tard.');
          }
        });
    } else {
      alert('Identifiant de transaction introuvable.');
    }
  }

  FedaPay.init('#pay-btn', {
    public_key: FEDAPAY_PK,
    transaction: {
      amount: amount,
      currency: 'XOF',
      description: desc
    },
    customer: {
      email: email,
      lastname: lastname,
      firstname: firstname,
      // selon la spec FedaPay: phone_number peut être soit string, soit objet
      phone_number: { number: phone.replace('+',''), country: countryCode }
    },
    // appelé après le paiement (certains SDK utilisent 'callback' ou 'onComplete')
    callback: onResult,
    onComplete: onResult,
    onclose: function() {
      // Si la modale se ferme sans callback, tenter une vérification serveur au cas où
      if (!callbackFired && lastTransactionId) {
        fetch('{{ path('payment_verify') }}?tx=' + encodeURIComponent(lastTransactionId))
          .then(r=>r.json()).then(v=>{
            if (v && v.ok && (['approved','succeeded','success','paid'].includes(String(v.status||'').toLowerCase()))) {
              confirmMembership();
            }
          }).catch(()=>{});
      }
    }
  });
  fedapayReady = true;
}

function fedapayPayThenSubmit() {
  if (!fedapayReady) { prepareFedaPay(); }
  // Ouvrir la modale (si nécessaire selon la version)
  if (typeof FedaPay.open === 'function') { FedaPay.open(); }
}

// Remplacez l'handler du bouton
(function bindPayBtn(){
  const btn = document.getElementById('pay-btn');
  if (!btn) return;
  btn.onclick = async function() {
    // Valider le formulaire avant de procéder au paiement
    await validateAndContinue();
    // Si la validation a réussi, formData sera remplie
    if (formData && formData.firstName) {
      fedapayPayThenSubmit();
    }
  };
})();

</script>
{% endblock %}
