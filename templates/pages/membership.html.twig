{% extends 'base.html.twig' %}
{% block title %}Devenir Membre - BINAJIA{% endblock %}
{% block content %}
<!-- üîß CORRECTION : Intercepter la redirection FedaPay -->
<script>
// V√©rifier si on arrive depuis une redirection FedaPay
const urlParams = new URLSearchParams(window.location.search);
const transactionId = urlParams.get('transaction-id');
const transactionStatus = urlParams.get('transaction-status');

// üîß NOUVELLE FONCTION : G√©rer la redirection FedaPay
async function handleFedaPayRedirect() {
  console.log('üöÄ D√©but handleFedaPayRedirect, transaction ID:', window.lastTransactionId);
  
  try {
    // V√©rifier le statut du paiement
    console.log('üì° V√©rification du statut du paiement...');
    const verifyUrl = '{{ path('payment_verify') }}?tx=' + encodeURIComponent(window.lastTransactionId);
    console.log('URL:', verifyUrl);
    
    const response = await fetch(verifyUrl);
    const data = await response.json();
    
    console.log('‚úÖ R√©ponse verification:', data);
    
    if (data && data.ok && ['approved','succeeded','success','paid'].includes(String(data.status||'').toLowerCase())) {
      console.log('‚úÖ Paiement confirm√© via API FedaPay, r√©cup√©ration des informations utilisateur...');
      
        try {
          // üîß NOUVELLE FONCTIONNALIT√â : Authentification automatique
          const authUrl = '{{ path('payment_auto_auth', {'transactionId': 'TRANSACTION_ID'}) }}'.replace('TRANSACTION_ID', window.lastTransactionId);
          console.log('üîê Authentification automatique, URL:', authUrl);
          
          const authResponse = await fetch(authUrl);
          const authData = await authResponse.json();
          
          console.log('‚úÖ Donn√©es d\'authentification:', authData);
          
          if (authData.success && authData.redirectUrl) {
            console.log('üéØ Utilisateur authentifi√© automatiquement:', authData.userName);
            console.log('üéØ Redirection vers:', authData.redirectUrl);
            
            // Stocker les informations de session c√¥t√© client
            if (authData.sessionToken) {
              localStorage.setItem('session_token', authData.sessionToken);
              localStorage.setItem('user_id', authData.userId);
              localStorage.setItem('user_name', authData.userName);
            }
            
            window.location.replace(authData.redirectUrl);
          } else {
            console.warn('‚ö†Ô∏è Authentification √©chou√©e, fallback vers payment_success');
            window.location.replace('{{ path('payment_success') }}?transaction_id=' + encodeURIComponent(window.lastTransactionId));
          }
        } catch (authError) {
          console.error('‚ùå Erreur authentification automatique:', authError);
          alert('Erreur lors de l\'authentification automatique: ' + authError.message);
          // Fallback vers la page de succ√®s
          window.location.replace('{{ path('payment_success') }}?transaction_id=' + encodeURIComponent(window.lastTransactionId));
        }
      
    } else {
      console.warn('‚ö†Ô∏è API FedaPay √©chou√©e, mais statut frontend = approved. Tentative de r√©cup√©ration utilisateur...');
      
      // Fallback : m√™me si l'API FedaPay √©choue, si le statut frontend est "approved", 
      // on peut quand m√™me essayer de r√©cup√©rer l'utilisateur
      if (window.lastTransactionStatus && ['approved','succeeded','success','paid'].includes(String(window.lastTransactionStatus).toLowerCase())) {
        console.log('üîÑ Fallback: statut frontend approved, tentative de r√©cup√©ration utilisateur...');
        
        try {
          // üîß FALLBACK : Authentification automatique m√™me si API FedaPay √©choue
          const authUrl = '{{ path('payment_auto_auth', {'transactionId': 'TRANSACTION_ID'}) }}'.replace('TRANSACTION_ID', window.lastTransactionId);
          console.log('üîê Authentification automatique (fallback), URL:', authUrl);
          
          const authResponse = await fetch(authUrl);
          const authData = await authResponse.json();
          
          console.log('‚úÖ Donn√©es d\'authentification (fallback):', authData);
          
          if (authData.success && authData.redirectUrl) {
            console.log('üéØ Utilisateur authentifi√© automatiquement (fallback):', authData.userName);
            console.log('üéØ Redirection vers (fallback):', authData.redirectUrl);
            
            // Stocker les informations de session c√¥t√© client
            if (authData.sessionToken) {
              localStorage.setItem('session_token', authData.sessionToken);
              localStorage.setItem('user_id', authData.userId);
              localStorage.setItem('user_name', authData.userName);
            }
            
            window.location.replace(authData.redirectUrl);
          } else {
            console.warn('‚ö†Ô∏è Authentification √©chou√©e m√™me en fallback, redirection vers payment_success');
            window.location.replace('{{ path('payment_success') }}?transaction_id=' + encodeURIComponent(window.lastTransactionId));
          }
        } catch (authError) {
          console.error('‚ùå Erreur authentification automatique (fallback):', authError);
          window.location.replace('{{ path('payment_success') }}?transaction_id=' + encodeURIComponent(window.lastTransactionId));
        }
      } else {
        console.warn('‚ö†Ô∏è Paiement non confirm√©:', data);
        alert('Paiement non confirm√©: ' + (data.message || 'Statut invalide'));
        window.location.replace('{{ path('app_membership') }}');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du traitement de la redirection:', error);
    alert('Erreur lors de la finalisation du paiement: ' + error.message);
    window.location.replace('{{ path('app_membership') }}');
  }
}

if (transactionId && transactionStatus && ['approved', 'succeeded', 'success', 'paid'].includes(transactionStatus.toLowerCase())) {
  // Redirection FedaPay d√©tect√©e - traiter le paiement
  console.log('Redirection FedaPay d√©tect√©e:', { transactionId, transactionStatus });
  
  // Stocker les donn√©es de transaction
  window.lastTransactionId = transactionId;
  window.lastTransactionStatus = transactionStatus;
  
  // üîß CORRECTION : Emp√™cher l'affichage du contenu normal de la page
  // Remplacer tout le contenu par le loader
  document.body.innerHTML = `
    <div class="fixed inset-0 bg-white flex items-center justify-center z-50">
      <div class="text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
        <h2 class="text-xl font-semibold text-gray-800 mb-2">Paiement confirm√© !</h2>
        <p class="text-gray-600">Finalisation de votre adh√©sion...</p>
      </div>
    </div>
  `;
  
  // Emp√™cher l'ex√©cution du reste du script
  window.fedaPayRedirectMode = true;
  
  // Traiter le paiement et rediriger
  setTimeout(() => {
    console.log('‚è∞ Timeout d√©clench√©, appel de handleFedaPayRedirect');
    handleFedaPayRedirect();
  }, 1000);
  
  // Timeout de s√©curit√© pour √©viter un blocage infini
  setTimeout(() => {
    console.log('‚è∞ Timeout de s√©curit√© d√©clench√© (30 secondes)');
    alert('Le paiement prend plus de temps que pr√©vu. Redirection vers la page d\'accueil.');
    window.location.replace('{{ path('app_home') }}');
  }, 30000); // 30 secondes
} else {
  // Mode normal - pas de redirection FedaPay
  console.log('Mode normal - pas de redirection FedaPay d√©tect√©e');
}
</script>

<!-- Contenu de la page (affich√© seulement en mode normal) -->
<div class="min-h-screen pt-20 pb-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-cream via-white to-cream">
  <div class="max-w-3xl mx-auto">
    <!-- Header -->
    <div class="text-center mb-10">
      <div class="inline-flex items-center justify-center w-20 h-20 bg-primary/10 rounded-full mb-6">
        <svg class="w-10 h-10 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
        </svg>
      </div>
      <h1 class="font-serif text-4xl md:text-5xl font-bold text-charcoal mb-3">Rejoignez Binajia</h1>
      <p class="text-lg text-gray-600">Devenez membre de notre communaut√© en quelques minutes</p>
    </div>

    <!-- Price Card -->
    <div class="bg-gradient-to-br from-primary to-secondary rounded-2xl p-6 mb-8 text-white shadow-xl">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-white/90 text-sm font-medium mb-1">Adh√©sion annuelle</p>
          <div class="flex items-baseline gap-2">
            <span class="text-5xl font-bold">5 000</span>
            <span class="text-xl font-semibold">FCFA</span>
          </div>
        </div>
        <div class="text-right">
          <div class="bg-white/20 backdrop-blur-sm rounded-lg px-4 py-2">
            <p class="text-xs text-white/90 mb-1">Vous recevrez</p>
            <p class="font-semibold">Carte membre digitale</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Form Card -->
    <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
      <!-- Progress Bar -->
      <div class="bg-gradient-to-r from-primary/5 to-secondary/5 px-6 py-4">
        <div class="flex items-center justify-between mb-2">
          <span class="text-sm font-semibold text-charcoal">Informations personnelles</span>
          <span class="text-xs text-gray-500">√âtape 1/1</span>
        </div>
        <div class="w-full bg-gray-200 rounded-full h-1.5">
          <div class="bg-gradient-to-r from-primary to-secondary h-1.5 rounded-full transition-all duration-500" style="width: 100%"></div>
        </div>
      </div>

      <!-- Form Content -->
      <div class="p-6 md:p-8">
        <form id="memberForm" class="space-y-6">
          <!-- Nom & Pr√©nom -->
          <div class="grid md:grid-cols-2 gap-4">
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2 flex items-center gap-1">
                Nom <span class="text-red-500">*</span>
              </label>
              <input 
                type="text" 
                id="lastName" 
                required 
                placeholder="Doe" 
                class="w-full px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
              />
            </div>
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2 flex items-center gap-1">
                Pr√©nom <span class="text-red-500">*</span>
              </label>
              <input 
                type="text" 
                id="firstName" 
                required 
                placeholder="John" 
                class="w-full px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
              />
            </div>
          </div>

          <!-- Email & T√©l√©phone -->
          <div class="grid md:grid-cols-2 gap-4">
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2 flex items-center gap-1">
                Email <span class="text-red-500">*</span>
              </label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"/>
                  </svg>
                </div>
                <input 
                  type="email" 
                  id="email" 
                  required 
                  placeholder="john@exemple.com" 
                  class="w-full pl-10 pr-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
                />
              </div>
            </div>
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2 flex items-center gap-1">
                T√©l√©phone <span class="text-red-500">*</span>
              </label>
              <div class="flex gap-2">
                <span id="dialPreview" class="flex items-center justify-center px-3 rounded-lg bg-gray-50 border-2 border-gray-200 text-charcoal font-medium text-sm">
                  +229
                </span>
                <input 
                  type="tel" 
                  id="phone" 
                  required 
                  placeholder="91 23 45 67" 
                  class="flex-1 px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
                />
              </div>
            </div>
          </div>

          <!-- Pays & Date de naissance -->
          <div class="grid md:grid-cols-2 gap-4">
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2 flex items-center gap-1">
                Pays <span class="text-red-500">*</span>
              </label>
              <div class="relative">
                <select 
                  id="country" 
                  required 
                  class="w-full px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all appearance-none bg-white cursor-pointer"
                >
                  <option value="">S√©lectionnez votre pays</option>
                  {% for c in countries %}
                    <option value="{{ c.code }}">{{ c.name }}</option>
                  {% endfor %}
                </select>
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                  </svg>
                </div>
              </div>
            </div>
            <div class="form-group">
              <label class="block text-sm font-semibold text-charcoal mb-2">
                Date de naissance
              </label>
              <input 
                type="date" 
                id="birthDate" 
                class="w-full px-4 py-3 rounded-lg border-2 border-gray-200 focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
              />
            </div>
          </div>

          <!-- Photo de profil -->
          <div class="form-group">
            <label class="block text-sm font-semibold text-charcoal mb-3 flex items-center gap-1">
              Photo de profil <span class="text-red-500">*</span>
            </label>
            <div class="flex items-center gap-4">
              <div id="photoPreview" class="w-24 h-24 rounded-full bg-gradient-to-br from-primary/10 to-secondary/10 flex items-center justify-center overflow-hidden border-2 border-gray-200 flex-shrink-0">
                <svg class="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
              </div>
              <div class="flex-1">
                <input 
                  type="file" 
                  id="photoInput" 
                  accept="image/*" 
                  class="hidden" 
                  onchange="handlePhotoUpload(event)"
                />
                <button 
                  type="button" 
                  onclick="document.getElementById('photoInput').click()" 
                  class="px-6 py-2.5 bg-white border-2 border-gray-300 rounded-lg hover:border-primary hover:bg-primary/5 transition-all font-medium text-charcoal"
                >
                  <span class="flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                    Choisir une photo
                  </span>
                </button>
                <p class="text-xs text-gray-500 mt-2">JPG ou PNG, max 5MB</p>
              </div>
            </div>
          </div>

          <!-- Terms -->
          <div class="bg-gray-50 rounded-lg p-4">
            <div class="flex items-start gap-3">
              <input 
                type="checkbox" 
                id="terms" 
                required 
                class="w-5 h-5 mt-0.5 text-primary border-gray-300 rounded focus:ring-2 focus:ring-primary/20 cursor-pointer"
              />
              <label for="terms" class="text-sm text-gray-700 cursor-pointer">
                J'accepte les <a href="#" class="text-primary font-semibold hover:underline">conditions d'utilisation</a> et la <a href="#" class="text-primary font-semibold hover:underline">politique de confidentialit√©</a> de Binajia
              </label>
            </div>
          </div>

          <!-- Submit Button -->
          <button 
            type="button" 
            id="pay-btn" 
            class="w-full bg-gradient-to-r rounded-full from-primary to-secondary text-white font-bold py-4  hover:shadow-lg hover:scale-[1.02] transition-all duration-200 flex items-center justify-center gap-2"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
            </svg>
            Payer et Finaliser l'adh√©sion
          </button>
        </form>
      </div>
    </div>

    <!-- Security Notice -->
    <div class="mt-6 flex items-center justify-center gap-2 text-sm text-gray-500">
      <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"/>
      </svg>
      Paiement s√©curis√© via FedaPay
    </div>
  </div>
</div>

<!-- Loading Overlay -->
<div id="paymentOverlay" class="fixed inset-0 z-[100] hidden">
  <div class="absolute inset-0 bg-black/60 backdrop-blur-sm"></div>
  <div class="absolute inset-0 flex items-center justify-center p-4">
    <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-sm w-full">
      <div class="flex flex-col items-center text-center">
        <div class="w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center mb-4">
          <svg class="animate-spin h-8 w-8 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
          </svg>
        </div>
        <h3 id="paymentOverlayTitle" class="text-xl font-bold text-charcoal mb-2">Traitement en cours‚Ä¶</h3>
        <p id="paymentOverlaySub" class="text-gray-600 mb-4">Merci de patienter.</p>
        <p class="text-xs text-gray-500">Ne fermez pas cette fen√™tre</p>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
{{ parent() }}
<script>

let currentStep=1,selectedPlan='',formData={},photoData=null;
// Mapping indicatifs (extrait; peut √™tre √©tendu ou remplac√© par intl-tel-input)
const countryDial = {
  'BJ': '+229','NG': '+234','FR': '+33','US': '+1','GB': '+44','CI': '+225','TG': '+228','SN': '+221','CM': '+237','GH': '+233','ZA': '+27','DE': '+49','ES': '+34','IT': '+39','CA': '+1'
};
// Montants par plan (XOF)
const planAmountXOF = { basic: 5000, standard: 15000, premium: 30000 };
function amountForSelectedPlan(){ return planAmountXOF[selectedPlan] || 5000; }
function updateDialFromCountry(){
  const sel = document.getElementById('country');
  const code = (sel && sel.value || '').toUpperCase();
  const dial = countryDial[code] || '+000';
  const dialEl = document.getElementById('dialPreview');
  if(dialEl) dialEl.textContent = dial;
  // si le champ t√©l√©phone commence par un autre indicatif connu, ne pas √©craser; sinon, pr√©fixer
  const phoneEl = document.getElementById('phone');
  if(phoneEl && phoneEl.value.trim()!=='' && !/^\+\d{1,3}/.test(phoneEl.value.trim())){
    phoneEl.value = phoneEl.value.replace(/^0+/, '');
  }
}
document.getElementById('email').addEventListener('blur', async (e) => {
  const email = e.target.value.trim();
  if (!email) return;
  const check = await checkEmailExists(email);
  if (!check.ok) {
    alert(check.message || 'Cet email est d√©j√† utilis√©.');
    e.target.classList.add('border-red-500');
  } else {
    e.target.classList.remove('border-red-500');
  }
});

document.addEventListener('change', (e)=>{ if(e.target && e.target.id==='country'){ updateDialFromCountry(); }});
document.addEventListener('DOMContentLoaded', updateDialFromCountry);
function selectPlan(p,e){
  selectedPlan=p;
  document.querySelectorAll('.plan-card').forEach(c=>{
    c.classList.remove('plan-selected','border-primary','border-accent');
    if(!c.classList.contains('border-gray-200')) c.classList.add('border-gray-200');
  });
  const el = e ? e.currentTarget : null;
  if(el){
    el.classList.remove('border-gray-200');
    el.classList.add('plan-selected','border-primary');
  }
}
function nextStep(s){if(!selectedPlan){alert('Veuillez s√©lectionner une formule');return;}goToStep(s);}
function goToStep(s){
  document.querySelectorAll('.step-content').forEach(c=>c.classList.add('hidden'));
  document.getElementById('step'+s).classList.remove('hidden');
  currentStep=s;updateProgress();window.scrollTo({top:0,behavior:'smooth'});
  // Pre-initialize payment once when arriving on step 3 to avoid double-click
  if (s===3) {
    try { prepareFedaPay(); } catch(_){}
  }
}
function previousStep(){if(currentStep>1)goToStep(currentStep-1)}
function updateProgress(){for(let i=1;i<=3;i++){const el=document.getElementById('step'+i+'-indicator');el.className=i<currentStep?'w-10 h-10 rounded-full bg-secondary flex items-center justify-center font-bold text-white':i===currentStep?'w-10 h-10 rounded-full bg-primary flex items-center justify-center font-bold text-white':'w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center font-bold text-gray-400';}
 document.getElementById('progress1').style.width=currentStep>=2?'100%':'0%';document.getElementById('progress2').style.width=currentStep>=3?'100%':'0%';}
function handlePhotoUpload(ev){const f=ev.target.files[0];if(!f)return;const r=new FileReader();r.onload=e=>{photoData=e.target.result;document.getElementById('photoPreview').innerHTML='<img src="'+photoData+'" class="w-full h-full object-cover">';};r.readAsDataURL(f);}
function getDial(){const el=document.getElementById('dialPreview');return el?el.textContent.trim():''}
function normalizeLocalPhone(num){return (num||'').replace(/\s+/g,'').replace(/[^0-9]/g,'').replace(/^0+/,'')}
async function validateAndContinue() {
  const email = val('email');
  if (!/^\S+@\S+\.\S+$/.test(email)) {
    alert('Veuillez entrer une adresse email valide.');
    return false;
  }

  // üîç V√©rifie si l'email est d√©j√† utilis√©
  const check = await checkEmailExists(email);
  if (!check.ok) {
    alert(check.message || 'Cet email est d√©j√† utilis√©.');
    return false;
  }

  const fullPhone = `${getDial()}${normalizeLocalPhone(val('phone'))}`;
  formData = {
    firstName: val('firstName'),
    lastName: val('lastName'),
    email: email,
    phone: fullPhone,
    country: val('country'),
    birthDate: val('birthDate'),
    terms: document.getElementById('terms').checked
  };

  if (!formData.firstName || !formData.lastName || !normalizeLocalPhone(val('phone')) || !formData.country || !formData.terms) {
    alert('Veuillez remplir tous les champs obligatoires et accepter les conditions.');
    return false;
  }

  if (!photoData) {
    alert('La photo de profil est obligatoire pour g√©n√©rer la carte.');
    return false;
  }

  return true;
}

async function checkEmailExists(email) {
  try {
    const res = await fetch('{{ path('app_check_email') }}', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({ email })
    });
    const data = await res.json();
    return data;
  } catch (e) {
    console.error('Erreur lors de la v√©rification email:', e);
    return { ok: false, message: 'Erreur serveur' };
  }
}

function val(id){return document.getElementById(id).value}
function updateSummary(){byId('summaryName').textContent=formData.firstName+' '+formData.lastName;byId('summaryEmail').textContent=formData.email;byId('summaryPhone').textContent=formData.phone;byId('summaryCountry').textContent=(formData.country||'').replace(/^./,m=>m.toUpperCase());byId('summaryBirthDate').textContent=formData.birthDate||'Non renseign√©e'; if(photoData){byId('summaryPhoto').innerHTML='<img src="'+photoData+'" class="w-full h-full object-cover">'} const names={basic:'D√©couverte',standard:'Standard',premium:'Premium'}, prices={basic:'5 000 FCFA',standard:'15 000 FCFA',premium:'30 000 FCFA'};byId('summaryPlan').textContent='Formule '+(names[selectedPlan]||'');byId('summaryPrice').textContent=prices[selectedPlan]||'';}
function byId(id){return document.getElementById(id)}
function showLoader(title, sub){const o=byId('paymentOverlay');if(!o)return;o.classList.remove('hidden');byId('paymentOverlayTitle').textContent=title||'Traitement en cours‚Ä¶';byId('paymentOverlaySub').textContent=sub||'Merci de patienter.'}
function hideLoader(){const o=byId('paymentOverlay');if(!o)return;o.classList.add('hidden')}
async function confirmMembership(){
  try {
    // üîß CORRECTION : √âviter les appels multiples
    if (window.membershipConfirmed) {
      console.log('Adh√©sion d√©j√† en cours de finalisation...');
      return;
    }
    window.membershipConfirmed = true;
    
    showLoader('Finalisation de votre adh√©sion‚Ä¶','Nous g√©n√©rons votre carte.');
    
    const payload = new URLSearchParams();
    payload.append('firstName', formData.firstName||'');
    payload.append('lastName', formData.lastName||'');
    payload.append('email', formData.email||'');
    
    const fullPhone = `${getDial()}${normalizeLocalPhone(document.getElementById('phone').value)}`;
    payload.append('phone', fullPhone||'');
    payload.append('country', formData.country||'');
    payload.append('birthDate', formData.birthDate||'');
    payload.append('plan', selectedPlan||'standard');
    
    if (photoData) payload.append('photoData', photoData);
    
    // Utiliser les variables globales
    if (typeof window.lastTransactionId !== 'undefined' && window.lastTransactionId) {
      payload.append('transactionId', String(window.lastTransactionId));
    }
    if (typeof window.lastTransactionStatus !== 'undefined' && window.lastTransactionStatus) {
      payload.append('transactionStatus', String(window.lastTransactionStatus));
    }
    
    payload.append('amount', String(amountForSelectedPlan()));

    const res = await fetch('{{ path('app_membership_submit') }}', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: payload.toString()
    });
    
    const data = await res.json();
    
    if (!res.ok || !data.ok) { 
      throw new Error(data.message||'Erreur lors de l\'inscription'); 
    }
    
    // üîß CORRECTION : Redirection imm√©diate et d√©finitive
    if (data.redirect) {
      console.log('Redirection vers:', data.redirect);
      // D√©sactiver tous les autres √©v√©nements pour √©viter les conflits
      window.membershipConfirmed = true;
      window.callbackFired = true;
      
      // Redirection imm√©diate
      window.location.replace(data.redirect);
    } else {
      throw new Error('URL de redirection manquante');
    }
    
  } catch(e) {
    console.error('Erreur finalisation:', e);
    alert('Impossible de finaliser l\'adh√©sion: '+ e.message);
    hideLoader();
    // R√©initialiser le flag en cas d'erreur
    window.membershipConfirmed = false;
  }
}

</script>

  <script>
// üîß CORRECTION : V√©rifier si on est en mode redirection FedaPay
if (window.fedaPayRedirectMode) {
  console.log('Mode redirection FedaPay d√©tect√©, arr√™t de l\'ex√©cution du script normal');
  // Arr√™ter l'ex√©cution de ce script
} else {
  console.log('Mode normal, initialisation FedaPay...');

const FEDAPAY_PK = '{{ fedapay_public_key|e('js') }}';
let lastTransactionId = null; let lastTransactionStatus = null; let callbackFired = false; let fedapayReady = false;

function prepareFedaPay(){
  // üîß CORRECTION : √âviter l'initialisation multiple
  if (fedapayReady) {
    console.log('FedaPay d√©j√† initialis√©, skip...');
    return;
  }
  
  const amount = amountForSelectedPlan();
  const desc = 'Adh√©sion Binajia - ' + (selectedPlan || 'standard');
  const email = formData.email;
  const firstname = formData.firstName;
  const lastname = formData.lastName;
  const countryCode = (formData.country || '').toUpperCase();
  const phone = formData.phone;

  // D√©clarer explicitement les variables globales
  window.lastTransactionId = null;
  window.lastTransactionStatus = null;
  window.callbackFired = false;

  function onResult(response){
    window.callbackFired = true;
    if (response && response.transaction) {
      window.lastTransactionId = response.transaction.id || window.lastTransactionId;
      window.lastTransactionStatus = response.transaction.status || window.lastTransactionStatus;
    }
    
    // V√©rification serveur IMM√âDIATE apr√®s callback FedaPay
    if (window.lastTransactionId) {
      verifyPaymentAndComplete();
    } else {
      alert('Identifiant de transaction introuvable.');
      hideLoader();
    }
  }


  function verifyPaymentAndComplete() {
    // üîß CORRECTION : √âviter les v√©rifications multiples
    if (window.paymentVerified) {
      console.log('Paiement d√©j√† v√©rifi√©...');
      return;
    }
    window.paymentVerified = true;
    
    fetch('{{ path('payment_verify') }}?tx=' + encodeURIComponent(window.lastTransactionId))
      .then(r => r.json())
      .then(data => {
        if (data && data.ok && ['approved','succeeded','success','paid'].includes(String(data.status||'').toLowerCase())) {
          confirmMembership();
        } else {
          // Fallback sur le statut frontend
          if (window.lastTransactionStatus && ['approved','succeeded','success','paid'].includes(String(window.lastTransactionStatus).toLowerCase())) {
            confirmMembership();
          } else {
            alert('Paiement non confirm√©: ' + (data.message || 'Statut invalide'));
            hideLoader();
            window.paymentVerified = false; // R√©initialiser en cas d'√©chec
          }
        }
      })
      .catch(error => {
        console.error('Erreur v√©rification:', error);
        alert('Erreur de v√©rification du paiement. Veuillez contacter le support.');
        hideLoader();
        window.paymentVerified = false; // R√©initialiser en cas d'erreur
      });
  }

  // Initialisation FedaPay avec gestion d'erreur
  try {
    console.log('Initialisation de FedaPay...');
    
    // Cr√©er un bouton cach√© pour l'initialisation FedaPay
    let hiddenPayBtn = document.getElementById('hidden-pay-btn');
    if (!hiddenPayBtn) {
      hiddenPayBtn = document.createElement('button');
      hiddenPayBtn.id = 'hidden-pay-btn';
      hiddenPayBtn.type = 'button';
      hiddenPayBtn.style.display = 'none';
      document.body.appendChild(hiddenPayBtn);
    }
    
    FedaPay.init('#hidden-pay-btn', {
      public_key: FEDAPAY_PK,
      transaction: {
        amount: amount,
        currency: 'XOF',
        description: desc
      },
      customer: {
        email: email,
        lastname: lastname,
        firstname: firstname,
        phone_number: { number: phone.replace('+',''), country: countryCode }
      },
      callback: onResult,
      onComplete: onResult,
      onclose: function() {
        // Si fermeture sans callback, v√©rifier apr√®s un d√©lai
        setTimeout(() => {
          if (!window.callbackFired && window.lastTransactionId) {
            verifyPaymentAndComplete();
          }
        }, 2000);
      }
    });
    
    fedapayReady = true;
    console.log('FedaPay initialis√© avec succ√®s');
  } catch (error) {
    console.error('Erreur lors de l\'initialisation de FedaPay:', error);
    alert('Erreur lors de l\'initialisation de la passerelle de paiement: ' + error.message);
    fedapayReady = false;
    throw error;
  }
}
function fedapayPayThenSubmit() {
  console.log('fedapayPayThenSubmit appel√©, fedapayReady:', fedapayReady);
  
  // Initialiser FedaPay si n√©cessaire
  if (!fedapayReady) { 
    console.log('Initialisation de FedaPay...');
    try {
      prepareFedaPay(); 
      // L'initialisation est synchrone, on peut ouvrir imm√©diatement
      openFedaPayModal();
    } catch (error) {
      console.error('Erreur lors de l\'initialisation:', error);
      // fedapayReady reste false en cas d'erreur, on peut r√©essayer
    }
  } else {
    // Si d√©j√† initialis√©, ouvrir directement
    openFedaPayModal();
  }
}

function openFedaPayModal() {
  console.log('Tentative d\'ouverture de la modale FedaPay...');
  
  // Cliquer sur le bouton cach√© initialis√© par FedaPay
  const hiddenBtn = document.getElementById('hidden-pay-btn');
  if (hiddenBtn) {
    console.log('Clic sur le bouton cach√© FedaPay');
    hiddenBtn.click();
  } else {
    console.error('Bouton cach√© FedaPay non trouv√©');
    
    // Fallback: essayer FedaPay.open() si disponible
    if (typeof FedaPay !== 'undefined' && FedaPay && typeof FedaPay.open === 'function') {
      console.log('Fallback: utilisation de FedaPay.open()');
      try {
        FedaPay.open();
      } catch (error) {
        console.error('Erreur FedaPay.open():', error);
        alert('Erreur lors de l\'ouverture de la passerelle de paiement.');
        fedapayReady = false;
      }
    } else {
      alert('Erreur: Impossible d\'ouvrir la passerelle de paiement. Veuillez rafra√Æchir la page.');
      fedapayReady = false;
    }
  }
}

// Remplacez l'handler du bouton
(function bindPayBtn(){
  const btn = document.getElementById('pay-btn');
  if (!btn) {
    console.log('Bouton pay-btn non trouv√©');
    return;
  }
  
  // üîß CORRECTION : √âviter les event listeners multiples
  if (btn.hasAttribute('data-listener-added')) {
    console.log('Event listener d√©j√† ajout√©, skip...');
    return;
  }
  
  btn.setAttribute('data-listener-added', 'true');
  console.log('Ajout de l\'event listener au bouton');
  
  btn.onclick = async function(e) {
    e.preventDefault();
    console.log('Clic sur le bouton de paiement');
    
    // Validation du formulaire
    if (!formData || !formData.firstName) {
      console.log('Validation du formulaire...');
      const isValid = await validateAndContinue(); // remplit formData si ok
      if (!isValid) {
        console.log('Validation √©chou√©e');
        return; // validation √©chou√©e
      }
    }
    
    console.log('Lancement du paiement FedaPay...');
    fedapayPayThenSubmit();
  };
})();

} // Fin de la condition else (mode normal)
</script>
{% endblock %}
